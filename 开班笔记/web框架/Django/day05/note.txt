1、转发 与 重定向
    1.转发（略）
    2.重定向
        1.什么是重定向
            重新向新的访问地址发送请求（服务端）
        2.语法
            from django.http import HttpResponseRedirect
            return HttpResponseRedirect(url)

2、ORM 操作
    更新Author表中所有人的年龄都加10岁
    MySQL语句：update index_author set age=age+10
    1.F()操作
        1.作用
            再执行操作中，获取某列的值时使用
        2.语法
            F('列名')

            from django.db.models import F
            Author.objects.all().update(age=F('age')+10)
    2.Q()操作
        Author.objects.filter(id=1, age=35)
        等同于
        select * form author where id=1 and age=35

        作用：在查询条件中，可以完成或(or)的操作
        语法：
            from django.db.models import Q
            Q(表达式)|Q(表达式)
        ex：查询Author实体中，id为6或年龄大于等于70的人的信息
            Author.objects.filter(Q(id=6)|Q(age__gte=70))
            select * from index_author where id=6 or age>=70;
    3.原生的数据库操作方法
        1.查询
            函数：raw(sql语句)
            语法：Entry.objects,raw(sql语句)
        2.增删改
            def doSQL(request):
                with connectin.cursor() as cursor:
                    sql = 'delete from author'
                    cursor.execute(sql)
                    return HttpResponse('...')

3、使用后台管理 Models
    1.后台的配置
        登录地址：http://localhost:8000/admin

        创建后台管理员：
        ./manage.py createsuperuser
        Username:输入用户名，默认为当前用户（tarena）
        Email Address:电子邮件
        Password:密码
        Password(again):重复密码
    2.基本管理
        1.在应用中的 admin.py 中注册要管理的实体类
            1.admin.py
                作用：注册需要管理的Models，只有在此注册的Models才允许被管理
            2.注册Models
                from .models import *
                admin.site.register(Entry)
                admin.site.register(Entry)
                ...
        2.修改 models.py 处理显示内容
            1.在models.py中为各个 class 追加
                def __str__(self):
                    return self.属性名
            2.通过 Models 类的内部类 Meta 定义每个类的展现形式
                class Author(models.Model):
                    ... ...
                    class Meta:
                        1.db_table
                            指定该实体类对应到表的名称
                        2.verbose_name
                            定义当前实体类在后台管理的列表页中的名称（单数形式）
                        3.verbose_name_plural
                            效果同上，是复数形式
                        4.ordering
                            指定实体数据列表页中的排序规则
                            取值是一个列表，默认按升序排序，降序则需要手动添加负号
    3.高級管理
        1.在 admin.py 中創建高級管理類
            1.定义 EntryAdmin，继承自admin.ModelAdmin
                class AuthorAdmin(admin.ModelAdmin):
                    pass
            2.注册高级管理类
                admin.site.register(Entry, EntryAdmin)

                admin.site.register(Author, AuthorAdmin)
        2.定制高级管理信息
            1.list_display
                作用：指定在 列表页中 能够显示的字段们
                取值：由属性名称组成的元组或列表
                ex：
                    list_display = ['name', 'age', 'email']
            2.list_display-links
                作用：指定在列表页中也能链接到详情页的字段们
                取值：由属性名称组成的元组或列表
                注意：取值必须出现在list_display的取值中
            3.list_editable
                作用：指定在列表页中就允许被编辑的字段名
                取值：由属性名称组成的元素或列表
                注意：取值不能出现在list_display_links，但必须出现在list_display中
            4.search_fields
                作用：添加允许被搜索的字段们
                取值：由属性名称组成的元组或列表
            5.list_filter
                作用：在列表的右侧增加过滤器实现快速筛选
                取值：由属性名称组成的元组或列表
            6.date_hierarchy
                作用：在列表页的顶端增加一个时间选择器
                取值必须是DateField或DateTimeField的值
            7.fields
                作用：在详情页面中，指定显示哪些字段并按照什么样的顺序显示
                取值：由属性名称组成的元组或列表
            8.fieldsets
                作用：在详情页中，对字段们进行分组显示
                注意：fieldsets 与 fields 不能共存
                语法：
                    fieldsets = [
                        #分组1
                        ('分组名称'，{
                            'fields': ('属性1'，'属性2',...),
                            'classes': ('collapse',), #可折叠
                            }
                        ),
                        #分组2
                        (),
                    ]
    练习：
        为publisher增加高级管理功能
        1.在列表页中显示
            name, address, city, website属性
        2.address 和 city 是可编辑的
        3.右侧增加过滤器，允许按照 address 和 city进行筛选
        4.分组显示
            name, address, city为'基本选项'
            country, website为可选选项并可以折叠

4、关系映射
    1.一对一映射
        1.什么是一对一
            A表中的一条记录只能与B表中的一条记录相关联
            数据库中实现：
                A表：设置主键
                B表：增加一列，并引用自A表的主键，还得增加一个唯一约束
        2.语法
            在关联的两个类的任何一个类中，增加：
            属性 = models.OneToOneField(Entry)
        3.查询
            class Wife(models.Model):
                ...
                author = models.OneToOneField(Author)
            正向查询：通过 wife 找 author
                #1.获取 id 为1的wife的信息
                wife = Wife.objects.get(id=1)
                #2.通过 Wife 的关联属性 author 来找Author
                author = wife.author

            反向查询：通过 author 找 wife
                #1.获取id为7的Author的信息
                author = Author.objects.get(id=7)
                #2.通过 author 的关联属性 wife 来找wife
                wife = author.wife
                注：wife是Djano通过
    2.一对多映射(1:m)
        1.什么是一对多
            A表中的一条数据可以与B表中的多条数据关联
            B表中的一条数据只能与A表中的一条数据关联

            如：
                出版社(publisher) 和 图书(Book)
                商品类型(GoodsType) 和 商品(Goods)
        2.在数据库中的体现
            通过外键（Foreign Key）来体现一对多
            在'多'表中增加外键(Foreign Key)对'一'表的主键进行引用
        3.语法
            使用外键（Foreign Key）
            在“多”的实体中，增加：
                属性 = models.ForeignKey(Entry)
            ex:
                Book(多) 和 Publisher(一)
                class Book(models.Model):
                    ... ...
                    publisher = models.ForeignKey(Publisher)
        4.查询
            Book(多) 和 Publisher(一)

            class Book(models.Model):
                ... ...
                publisher = models.ForeignKey(Publisher)
            1.正向查询 -- 通过Book查询Publisher
                #查询id为1的书籍的信息
                    book = Book.objects.get(id=1)
                #查询关联的publisher
                    publisher = book.publisher
            2.反向查询 -- 通过Publisher查询Book
                Django会在'一'的实体中增加 关联对象_set 属性用于查询 '多' 的数据

                ex：
                    publisher = Publisher.objects.get(id=1)
                    books = publisher.book_set.all()
    3.多对多映射(m:n)
        1.什么是多对多
            A表中的一条记录可以与B表中的任意多条记录匹配
            B表中的一条记录可以与A表中的任意多条记录匹配

            ex：
                作者 和 书籍
        2.在数据库中的体现
            必须创建第三张表，关联涉及到的两张表数据
        3.语法
            允许在任何一个实体中增加操作：
                entry = models.ManyToManyField(Entry)
            ex:
                class Author(models.Model):
                    ... ...
                    book = models.ManyToManyField(Book)
        4.查询
            class Author(models.Model):
                ... ...
                book = models.ManyToManyField(Book)
            1.正向查询 -- 通过Author查询所有的Book
                author = Author.objects.get(id=3)
                books = author.book.all()
                通过 关联属性.all() 查询所有对应数据

            2.反向查询 -- 通过Book查询所有的Author
                Django中会在 Book实体 中增加一个隐式属性 author_set
                book = Book.objects.get(id=1)
                author = book.author.set.all()

5、自定义查询对象 -- objects
    1.声明类EntryManager，继承自models.Manager
        在 EntryManager 中添加自定义函数

        class EntryManager(models.Manager):
            def 函数名(self, 自定义参数列表):
                ... ...
                return ... ...
    2.使用 EntryManager 覆盖 models 类中的objects
        class Entry(models.Model):
            objects = EntryManager()

