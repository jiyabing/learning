1.块（block）的用法
    在不同的模板中会存在一些相同的标签或者内容，为了避免每次都重复写这些相同的内容，我们可以把他们提取到一个公共的模板中（base.html）,让不同的模板通过继承公共模板获得这些相同的内容。

    在公共模板中，使用{% block 名字 %}...{% end %}标识出不同的模板可能存在不同内容的地方。

    不同的模板在使用公共模板时，一定把继承写在第一行{% extends base.html %}

2.模块(module)的使用
    1.模块的意义：
        1.模块是可以复用的，利用已有的模块可以非常方便的拼出新的页面/模板
        2.可以进行协同开发
        3.通过模块让模块看上去更加的简洁

    2.使用步骤：
        1.创建一个文件夹存放模块文件，该文件夹必须建立在模板文件夹下
        2.创建模板文件（html文件）
        3.关联模板文件和模块文件 ---> {% module xxx() %}
        4.进行配置。在Application中增加参数：
            ui_modules = {'xxx':类名}
        5.创建配置时对应的类，必须继承自UIModule,重写钩子方法render，该方法必须返回一个字符串，作为模板与模块的关联内容，所以这里应该返回的是模块文件转成的字符串，直接调用UIModule的render_string方法就可以完成。
        注意：如果模块中有变量，表达式等内容，必须在render_string方法中对变量，表达式进行相应的赋值

3.UIModule中，request属性引用着HttpServerRequest类型的对象，可以帮助我们完成一些与请求相关的操作，比如获取请求参数
    HttpServerRequest对象的常用属性：
        1.method HTTP的请求方式，如GET或POST;
        2.host 被请求的主机名；
        3.uri 请求的完整资源标示，包括路径和查询字符串；
        4.path 请求的路径部分；
        5.query 请求的查询字符串部分；
        6.version 使用的HTTP版本；
        7.headers 请求的协议头，是类似字典的对象，支持关键字索引的方式获取特定协议头信息，例如：request.headers[“Content-Type”]，也可以用get的方式获取指定特定协议头信息；
        8.body 请求体数据（二进制格式）；
        9.remote_ip 客户端的IP地址；
        10.files 用户上传的文件，为字典类型

4.Tornado的转义
    一种安全机制，防止用户在页面中嵌入JavaScript代码。
    这种安全机制是自动开启的，可以通过设置进行关闭给Application添加参数：autoescape=None

5.具有登录和注册功能的博客应用
    设计数据表：
    1.用户表tb_user
        create table if not exists tb_user(
        user_id int auto_increment,
        user_name varchar(32) not null,
        user_password varchar(64) not null,
        user_avatar varchar(128) default null,
        user_city varchar(32) not null,
        user_createdate datetime default current_timestamp,
        user_updatadate datetime default current_timestamp on update current_timestamp,
        primary key(user_id),
        unique(user_name)
        )default charset=utf8

    2.博客表tb_blog
        create table if not exists tb_blog(
        blog_id int auto_increment,
        blog_user_id int not null,
        blog_title varchar(100) not null,
        blog_content varchar(1024) not null,
        blog_createdate datetime default current_timestamp,
        blog_updatedate datetime default current_timestamp on update current_timestamp,
        primary key(blog_id),
        foreign key(blog_user_id) references tb_user(user_id) on delete cascade on update cascade
        )default charset=utf8;

    3.评论内容tb_comment
        create table if not exists tb_comment(
        comment_id int auto_increment,
        comment_blog_id int not null,
        comment_user_id int not null,
        comment_content varchar(256) not null,
        comment_createdate datetime default current_timestamp,
        comment_updatedate datetime default current_timestamp on update current_timestamp,
        primary key(comment_id),
        foreign key(comment_blog_id) references tb_blog(blog_id) on delete cascade on update cascade,
        foreign key(comment_user_id) references tb_user(user_id) on delete cascade on update cascade
        )default charset=utf8;


    4.标签表tb_tag
        create table if not exists tb_tag(
        tag_id int auto_increment,
        tag_content varchar(16) not null,
        primary key(tag_id)
        )default charset=utf8;

    5.博客标签表tb_blog_tag
        create table if not exists tb_blog_tag(
        blog_tag_id int auto_increment,
        rel_blog_id int not null,
        rel_tag_id int not null,
        primary key(blog_tag_id),
        foreign key(rel_blog_id) references tb_blog(blog_id) on delete cascade on update cascade,
        foreign key(rel_tag_id) references tb_tag(tag_id) on delete cascade on update cascade
        )default charset=utf8;

6.向用户表tb_user插入用户信息
    insert into tb_user(user_name,user_password,user_city) values('zhao','123','上海');

7.从用户表中查询beijing和shanghai的所有用户信息
    select user_name,user_city 
    from tb_user
    where user_city='beijing' or user_city='shanghai';

    select user_name,user_city 
    from tb_user
    where user_city in ('beijing','shanghai');

8.从用户表中查询2018-7-3 15:50:00至2018-7-3 15:53:00之间注册的所有用户信息
    select user_name,user_city,user_createdate
    from tb_user
    where user_createdate > '2018-07-03 15:50:00' and user_createdate < '2018-07-03 15:53:00';

    select user_name,user_city,user_createdate
    from tb_user
    where user_createdate between '2018-07-03 15:50:00' and '2018-07-03 15:53:00';

9.从用户表中找到最晚的注册时间
    select max(user_createdate) from tb_user
    select max(user_createdate)abc from tb_user

10.查询每个城市的最晚注册时间(城市名称，时间)
    select user_city,max(user_createdate)
    from tb_user
    group by user_city

11.从用户表中查询最晚注册用户的信息．
    错误的写法！使用聚合函数但没有用group_by
    select user_name,max(user_createdate)
    from tb_user

    正确的写法：
    select user_name,user_createdate
    from tb_user
    where user_createdate = (select max(user_createdate) from tb_user)

12.从用户表中查询每个城市的最晚注册用户的信息(多表联合查询)
    1.内联接查询inner join,mysql可以简写为join
    2.外联接查询
        左外联接查询left outer join,mysql可以简写为left join
        右外联接查询right outer join,mysql可以简写为right join
    create table t1(
        cid varchar(10),
        city varchar(10),
        primary key(cid)
    )
    insert into t1 values('tedu','bj'),('tx','bj'),('jd','sh'),('bd','bj')

    create table t2(
        id int,
        customer varchar(10),
        primary key(id)
    )
    insert into t2 values(1,'tedu'),(2,'tedu'),(3,'tx'),(4,'jd'),(5,Null)

    t1和t2做内联接查询：

    select * from t1 join t2
    得到t1和t2的迪卡尔积


    select * from t1 join t2
    on t1.cid = t2.customer
    在t1和t2的迪卡尔积上做了筛选．
    筛选的条件就是t1和t2中有关联的列


    只有在t1和t2筛选过的迪卡尔积上
    t1和t2做左外联接查询
    select * from t1 left join t2
    on t1.cid = t2.customer

    只有在t1和t2筛选过的迪卡尔积上
    t1和t2做右外联接查询
    select * from t1 right join t2
    on t1.cid = t2.customer

13.每个城市的最晚注册用户信息
    用户表和每个城市的最晚注册时间做迪卡尔积
    select user_name,tb_user.user_city,user_createdate,m
    from tb_user
    join (select user_city,max(user_createdate)m
    from tb_user
    group by user_city
    )t
    on tb_user.user_city = t.user_city and tb_user.user_createdate = t.m;