1.用递归实现斐波那契数列；
    1，1，2，3，5，8，...
    def f(n):
        if n <= 1:
            return 1
        return f(n-1) + f(n-2)

2.使用递归来实现从一个list中的最大最小取出来，返回。
    def minMax(L, start, end):
        '''
        返回一个元组，用来记录List的最大值和最小值
        '''
        if end - start <= 1:
            return (max(L[start],L[end]),min(L[start],L[end]))
        else:
            # 把L分成两部分，分别调用这个方法minMax
            middle = (start + end)//2
            # 得到(max1,min1)和(max2,min2)
            t1 = minMax(L, start, middle)
            t2 = minMax(L, middle, end)
            # 比较max1,max2可以得到最终的最大值
            # 比较min1,min2可以得到最终的最小值
            return (max(t1[0], t2[0]), min(t1[1], t2[1]))

3.Anaconda安装包：
    打开Anaconda
    pip install builtwith
    pip install python-whois

4.hash算法（对某段信息打指纹，能够压缩信息，hash算法不可逆）
    import hashlib
    h = hashlib.md5()
    h.update(('hello world').encode('utf8'))
    h.hexdigest()
    #'5eb63bbbe01eeed093cb22bb8f5acdc3'

5.hash文件
    import hashlib
    CHUNKSIZE = 4096
    def hashFile(fileName):
        '''
        对文件做hash
        '''
        h = hashlib.sha256()
        with open(fileName, 'rb') as f:
            while True:
                chunk = f.read(CHUNKSIZE)
                if not chunk:
                    break
                h.update(chunk)
        return h.hexdigest() #得到文件最终的hash值

关键词：
    爬虫，深度优先，广度优先，队列，栈，递归；
    队列(FIFO, first in first out)，一个口进另一个口出
    栈(LIFO, last in first out)，同一个口既进也出
    是两种数据结构，这是一种逻辑上的结构
    
    深度优先，广度优先
    是两种算法；
    递归是一种思想，深度优先使用了递归的思想
    栈这种结构可以实现递归的效果
    广度优先使用了队列这种结构来实现它

作业：
    1.复习今天所讲的内容，重点看关键词
    2.运行binaryTreeTra.py，对照深度和广度优先的结果；
    3.把一个文件夹下面的文件，拷贝到另一个文件下面；
        要求：
            1.使用多进程(进程池)或者多线程(线程池)来完成
            2.怎么证明拷贝的文件的完整
            3.文件夹下的文件不少于1000，文件类型多元化
            4.可以加入进度条的考虑
