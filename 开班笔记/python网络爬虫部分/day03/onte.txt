1.正则表达式：
    最难的地方是剔除不需要匹配的信息，而不是匹配不到想要的信息
最复杂的电子邮箱正则匹配：
    (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)
    *|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\
    [\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+
    [a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|
    [01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|
    [a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|
    \\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])

2.
    贪婪模式：.*_
    懒惰模式：.*?_
    
    在匹配网页信息的时候比较适合的方式是：
        使用懒惰的模式，使用勤劳的态度(findall)获取所有应该抓取到的信息
    
    万能正则表达式：
        [\s\S]*?

作业：
    把 i=d%0A&from=AUTO&to=AUTO&smartresult=dict
    转换成下面的形式：
    i:d%0A
    from:AUTO
    to:AUTO
    smartresult:dict
    
面试题：
    1000瓶水，其中一瓶是毒药，10只小老鼠，毒发时间为一周，如何在一周内挑出
    毒药。
    水瓶编号：
    1       0000000001  (第10只老鼠喝)
    2       0000000010  (第9只老鼠喝)
    3       0000000011  (第9、10只老鼠喝)
    4       0000000100  (第8只老鼠喝)
    5       0000000101  (第8、10只老鼠喝)
    ...
    900     1110000100  (第1、2、3、8只老鼠喝)
    ...
    1000    1111101000  (第1、2、3、4、5、7只喝)

python的多进程、多线程
    1）单核情况下，有一个线程
        while True:
            pass
        cpu占用率几乎100%
    2）双核情况下，有两个线程（进程）
        while True:
            pass
        cpu占用率几乎50%（100%）

GIL全局解释锁：
    最初是为了适应单核年代，性能不是问题，同时由于GIL的存在，数据更加安全
    但是到了对核的年代，由于GIL的存在，成了性能的瓶颈；python为了应对这个问题，
提倡我们使用multiprocessing中的Process;

python多进程的使用场景：
    计算密集型的场景，比如加密解密、科学计算、图像处理、机器学习等等
    
python多线程的使用场景：
    IO密集型的场景，比如爬虫，网络下载程序等等

进程是cpu分配资源的单位，线程是真正的执行流程
协程是轻量级的线程

进程池之间通信的时候，需要使用from multiprocessing import Manager


