函数 function
    函数是可以重复执行的语句块，可以重复调用。
    作用：
        1.用于封装可重复执行的语句，提高语句的可重用性
        2.定义用户级别的函数

    函数定义语句 def语句的语法：
        def 函数名（参数列表）:
            语句块（代码块）

    函数的语法说明：
        1.函数的名字就是语句块的名称
        2.函数名的命名规则与变量名命名规则相同（必须为标识符）
        3.函数名是一个变量（不要轻易对其赋值）
        4.函数的自己的名字空间，在函数内部可以访问外部的变量，但外部的语句不能
          访问函数内部的变量
        5.函数如果不需要传入参数，则参数列表可以为空
        6.语句部分不能为空，如果为空需要填充pass语句

    函数调用：
        函数名（实际调用传递参数）
        注：
            实际调用传递参数简称‘实参’
        调用说明：
            1.函数调用是一个表达式
            2.如果没有return语句，函数执行完成后返回None对象
            3.如果函数需要返回其他的对象，需要用到return语句

练习1：
    1.写一个函数mysum，此函数带有两个参数x,y
      此函数功能是打印出两个参数x,y的和，即x+y
    2.写一个函数print_even,传入一个参数n代表终止整数（不包含n）
        见 code 内的lianxi1

    函数内部有独立运行空间，函数外部不能访问函数内部变量
    示例见：
        code 内的 function_variable.py

    return 语句：
        语法：
            return [表达式]
            注:[]代表其中的内容可以省略

        作用：
            用于函数中，结束当前函数的执行，返回到调用函数的地方，
            同时返回一个对象的引用关系
        说明：
            1.return语句后跟的表达式可以省略，省略后相当于return None
            2.如果函数内没有return语句，则函数执行完最后一条语句后返回None
            3.函数调用会返回一个对象的引用
        示例见：
           code 内的 return.py

练习2：
    1.写一个函数mymax，返回两个数的最大值
    2.写一个函数input_number(),此函数用于读取用户输入的多个整数
     （输入负数时结束输入），将用户输入的数形成列表返回给调用者
         def input_number():
             ...
         L = input_number()
         print('输入的最大数是：'，max(L))
         print('输入的这些数的和是：'sum(L))
    见 code 内的lianxi2.py

    python函数的参数传递
        传递方式：
            1.位置传参
            2.序列传参
            3.关键字传参
            4.字典关键字传参

        位置传参：
            实际调用参数（实参）的对应关系与形式参数（形参）的对应关系是按位置
            来依次对应的

        序列传参：
            序列传参是在函数调用过程中，用*将序列拆解后按位置进行传递的传参方式
            实参和形参通过序列传递和匹配

            示例：
                def fx(a,b,c):
                    pass
                s1 = [11,22,33]
                fx(*s1)#将序列拆解后按顺序进行位置传参
                fx(*'abcd')#会报错，实参和形参个数不一致

                >>>s = 'abcde'
                >>>print(*s)
                a b c d e

        关键字传参：
            是指传参时，按着形参的名称给形参赋值
            实参和形参按名称进行匹配

            示例：
                def fx(a,b,c):
                    pass
                fx(b=22,c=33,a=11)
            注：
            实参和形参按形参名进行匹配，可以不按位置进行匹配

        字典关键字传参：
            实参为字典，用**拆解字典后在进行关键字传参
            示例：
                def fx(a,b,c):
                    pass
                d = {'c':33,'a':11,'b':22}
                fx(**d)  #拆解字典再依次按关键字传参
            说明：
                字典的键名和形参必须一致
                字典的键名必须为字符串
                字典的键名要在形参中存在

        综合传参：
            函数的传参方式在能确定形参能唯一匹配到相应实参的情况下可以任意组合
            注：
                通常位置传参和序列传参先传递，其次是关键字传参和字典关键字传参
            示例:
                def fx(a,b,c,d,e,f):
                    pass
                fx(10,*[20,30],e=50,**{'d':40,'f':60})

                以下的传参方式错误
                fx(e=50,**{'d':40,'f':60},10,*[20,30])

------以下讲函数的形参-------
    函数的缺省参数
        语法：
            def 函数名（形参名1=默认实参1，形参名2=默认实参2，...）:
                语句
        示例：
            def info(name,age=1,address='不详'):
                print('我叫',name,'我今年：',age,'岁'，'家庭住址:',address)

            info('张飞',30,'中原')
            info('Tarena',10)
            info('赵云')

        说明：
            1.缺省参数必须自右至左依次存在
              def info(name,age=1,address):#会报错
                
            2.缺省参数可以有0个，1个，多个，甚至全部都有缺省参数

            3.缺省参数的绑定对象存在于函数内，同函数的生命周期一致
              示例：
                  def fn(a,l=[]):
                         l.append(a)
                         print(l)
                  l = [1,2,3,4]

                  fn(5,l)#[1,2,3,4,5]                
                  fn(6,l)#[1,2,3,4,5,6]
                  

                  fn(1.1)#[1.1]            
                  fn(2.2)#[1.1,2.2]

    函数的形参定义方式：
        1.位置形参
        2.星号元组形参
        3.命名关键字形参
        4.双星号字典形参

        位置形参：
            def 函数名（形参名1，形参名2，...）:
                语句块

        星号元组形参：
            语法：
                def 函数名（*元组形参名）：
                    语句块
            作用：
                收集多余的位置传参
            示例见：
                code 内的 star_tuple_argument.py

        命名关键字形参：
            语法：
                def 函数名（*，命名关键字形参）：
                    语句块
                或
                def 函数名（*args，命名关键字形参）：
            作用：
                所有的命名关键字形参都强制调用者采用关键字传参或字典关键字传参的
                方式传递
            示例见：
                code 内的 keyword_arguments.py

        双星号字典形参：
            语法：
                def 函数名(**字典形参名):
                    语句块
            作用：
                收集多余的关键字传参
            注：字典形参名通常叫 kwargs
            示例见：
                code 内的 dict_keyword_argument.py

    函数参数说明：
        位置形参，缺省参数，星号元组形参，，命名关键字形参，双星号字典形参可以
        混合使用

        函数参数从左至右的顺序为：
            1.位置形参
            2.星号元组形参
            3.命名关键字形参
            4.双星号字典形参
        示例：
            def fn(a,b,*args,c,**kwargs):
                print(a,b,args,c,kwargs)

            fn(1,2,3,4,*'ab',**{'d':'D'},c=100)
            输出：1 2 (3,4,'a','b') 100 {'d':D}

            fn(1,2,3,4,*'ab',**{'d':'D','c':'X'},e=100)
            输出：1 2 (3,4,'a','b') X {'d':D,'e':100}

        可以接受任意位置传参和关键字传参的函数：
            def fn(*args,**kwargs):
                pass

练习3：
    1.写一个函数mysum,可以传入任意个实参的数字，返回所有实参的和
        def mysum(...):
            ...
        print(mysum(1,2,3,4)) #10

    2.已知内建函数max的帮助文档为：
        max(...)
            max(interable) -> value
            max(arg1,arg2,*arg3) -> value
      仿造max，写一个mymax函数，实现功能与max完全相同
      测试示例：
          print(mymax([6,8,3,5])) #8
          print(mymax(100,200))  #200

    3.写一个函数min_max
        可以给出任意个数字实参，返回这些实参的最小值和最大值，要求两个数字形成
        元组后返回（小在前，大在后）





















    
