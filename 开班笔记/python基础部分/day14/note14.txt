闭包 closure
    将内嵌函数的语句和这些语句的执行环境打包在一起后，得到的函数对象
    称为闭包

    闭包必须满足以下三个条件：
        1.必须有一个内嵌函数
        2.内嵌函数必须引用外部函数中的变量
        3.外部函数返回值必须是内嵌函数
    示例：
        见 code 内的 closure.py
    说明:
        如果一个内嵌函数访问了外部嵌套函数作用域内的变量，则这个内嵌
        函数叫做闭包函数

装饰器 decorators(专业提高篇)
    1.装饰器是一个函数，这个函数的主要作用是包装另一个函数或类
    2.包装的目的是在不改变原函数的情况下改变被包装对象的行为

    函数装饰器 function decorators
        函数装饰器是指装饰是一个函数，传入的是一个函数，
        返回的也是一个函数
    示例：
        deco1.py

函数的文档字符串：
    语法：
        def 函数(参数列表)：
            '''函数的文档字符串'''
            语句块
    说明：
        文档字符串通常来用来说明本函数的功能和使用方法
        在交互模式下，输入help(函数名)，可以查看函数的'文档字符串'

函数的__doc__属性：
    函数内的第一次未赋值给任何变量的字符串是此函数的文档字符串，此字符
    串会自动赋值给函数的__doc__属性
    示例：
        def cba():
            '只是文档字符串'
            pass
        print(cba.__doc__) #只是文档字符串

函数定义语句的完整语法：
    [@装饰器1]
    [@装饰器1]
    ...
    def 函数名([位置形参],[*元组形参],[命名关键字形参],[**字典形参]):
        '文档字符串'
        语句块

模块 module
    什么是模块：
        模块是一个包含有一系列变量，函数，类等组成的程序组
        模块是一个文件，模块文件通常以.py结尾
    作用：
        1.让一些相关的变量，函数，类等有逻辑的组织在一起，
          使逻辑结构更加清晰
        2.模块中的变量，函数和类可提供给其他模块使用
    模块的分类：
        1.内置模块(biultins),在解释器的内部可以直接使用
        2.标准库模块，安装python时已安装且可直接使用
        3.第三方模块(通常为开源),需要自己安装
        4.用户自己编写的模块(可以作为其他人的第三方模块)

    模块的导入 import
    import 语句
        语法：
            import 模块名1 [as 模块新名1][,模块名2 [as 模块新名2...]
        示例：
            import math #导入数学模块
            import sys ,os #导入sys,os模块
        作用：
            将某模块整体导入到当前模块中
        用法：
            模块名.属性名

        help(模块名) 查看模块内的变量，函数，类等
                            
练习：
    1.输入圆的半径，打印圆的面积
        import math
        r = int(input('半径：'))
        area = math.pi * math.pow(r,2)
        
        
    2.输入圆的面积，打印圆的半径
        import math
        a = int(input('面积：'))
        r = math.sprt(a/math.pi)

    from import 语句
        语法：
            from 模块名 import 模块属性名1 [as 属性新名1],
            模块属性名2 [as 属性新名2],...
        作用：
            将某模块中内的一个或多个属性导入到当前模块的作用域
        示例：
            from math import pi,sqrt
            from math import factorial as fac
            可以直接使用导入的函数名或变量名

    from import * 语句
        语法：
            from 模块名 import *
        作用：
            将某模块的所有属性导入到当前模块
        示例：
            from math import *

    dir 函数
        格式：
            dir([对象]) -->返回一个字符串列表
        说明：
            如果没有参数调用，则返回当前作用域内的所有变量的列表
            如果给定一个对象作为参数，则返回这个对象的所有变量的列表
                1.
                2.
                3.

    常见模块见：
            python3笔记附件

练习1：
    1.编写函数fun(n) 其功能是计算并输出下列多项式的和
        Sn=1+1/1!+1/2!+1/3!+...+1/n!
    2.编写函数fun(n),求：
        s = 1+x**1/1!+x**2/2!+x**3/3!+...+x**n/n!
        print(fun(3.1,10))


练习2：
    1.已知有五位朋友在一起，第一位10岁，以后依次比前一位大2岁，求第五位年龄
    2.改写之前的学生信息管理项目源码，要求带有操作界面：
       +------------------------------+
       | 1)添加学生信息               |
       | 2)显示所有学生的信息         |
       | 3)删除学生信息               |
       | 4)修改学生成绩               |
       | 5)按学生成绩高-低显示学生信息|
       | 6)按学生成绩低-高显示学生信息|
       | 7)按学生年龄高-低显示学生信息|
       | 8)按学生年龄低-高显示学生信息|
       | 9)退出                       |
       +------------------------------+
        请选择：






