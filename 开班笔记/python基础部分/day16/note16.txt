包（模块包）package
    包是将模块以文件夹的组织形式进行分组管理的方法
    作用：
        1.将一系列模块进行分类管理，有利于防止命名冲突
        2.可以在需要时加载一个或部分模块而不是全部模块
    包示例：
        package/
            __init__.py
            menu.py
            games/
                __init__.py
                contra.py #魂斗罗
                supermario.py#超级玛丽
            office/
                __init__.py
                excel.py
                word.py
                powerpoint.py

    说明：
        当子包或子包内的模块被导入时，上一层的包也会被先导入
        例如：
            import package.games.contra
            此时会先导入package，再导入games,再导入contra

    __init__.py文件
        是常规包内必须存在的文件，__init__.py会在导入包时被自动调用
        作用：
            1.编写此包的内容
            2.在内部添加包的文档字符串
            3.在__init__.py文件内可以加载此包所依赖的其它模块
        示例见：
            code 内的 package/__init__.py

    包的__all__列表：
        作用：
            用来记录此包中有哪些子包或模块需要导入，当用'from 包 import *'语句
            导入时，只查找__all__中的模块或子包
            此语句写在包内的__init__.py文件内
            __all__ = ['包名1(或模块名1)'，'包名2(或模块名2)']

        说明：
            __all__列表只在from xxx import *语句时起作用

        示例见：
            code 内的 __all__列表测试.py

    包的相对导入：
        包的相对导入是指包内的模块的相互导入

        语法：
            from 相对路径包或模块 import 属性或模块名
            或
            from 相对路径包或模块 import *

        相对路径：
            在from xxx import 语句中，xxx部分可以使用相对路径
            . 代表当前目录
            .. 代表上一级目录
            ... 代表上二级目录
            .... 依次类推

            注：
                1.相对导入时不能超出包的外部
                2.相对导入避免循环导入

            示例见：
                code 内的 包的相对导入.py


异常（基础）exception
    1.什么是错误
        错误是指由于逻辑或语法等导致一个程序无法正常执行的问题

        错误的特点：
            有些错误无法预知

    2.什么是异常
        异常是程序出错时标识的一种状态，当异常发生时，程序不会再向下执行，而
        转去调用此函数的地方等待处理错误并恢复为正常状态

        异常的作用：
            通知上层调用者有错误产生需要处理
            用作信号

    try-except语句的两种语法:
        try:
            可能触发异常的语句
        except 错误类型1 [as 变量1]：
            异常处理语句1
        except 错误类型2 [as 变量2]：
            异常处理语句2
        except(错误类型3，错误类型4，...):
            异常处理语句3
        ...
        except:           #除了以上的错误以外的任何错误都可以处理
            异常处理语句other
        [esle:
            未发生异常的语句]
        [finally:
            最终语句]
    作用：
        尝试捕捉异常，将程序转为正常状态并继续执行
    示例见：
        code 内的 try_except1.py

    try-except语句语法说明：
        1.as 子句是用于绑定错误对象的变量，可以省略
        2.except 子句可有一个或多个，但至少要有一个
        3.else 子句最多只能有一个，也可以省略
        4.finally子句最多只能有一个，也可以省略

练习1：
    写一个函数get_score()来获取用户输入的学生成绩（0-100的整数），如果输入
    出现错误，则此函数返回0，如果用户输入的数是0-100之间的数，返回这个数
    def get_score():
        ...
    score = get_score()
    print('学生成绩是：',score)

    见 code 内的 lianxi1.py

    try-finally语句：
        语法：
            try:
                可能触法异常的语句
            finally:
                最终语句

        语法说明：
            finally 子句不可以省略
            一定不存在except子句

        作用：
            通常用try-finally语句来做触发异常时必须要处理的事件，无论异常是否
            发生，finally子句都会被执行
            注：
                try-finally 语句不会改变程序的（正常/异常）状态

        示例见：
            code 内的 try-finally.py

raise 语句：
    作用：
        触发一个错误，让程序进入异常状态：
    语法：
        raise 异常类型
        或
        raise 异常对象
    示例见：
        code 内的 raise.py

assert 语句（断言语句）
    语法：
        assert 真值表达式，错误数据（通常是字符串）
    当真值表达式为False时，用错误数据创建一个AssertionErroe类型的错误，
    并进入异常状态

    等同于：
        if 真值表达式 == False:
            raise Assertion(错误数据)
    示例见：
        code 内的 assert.py

为什么要用异常处理机制：
    在程序调用层数较深时，向主调函数传递错误信息需要层层的return返回比较麻烦，
    所以用异常处理机制

练习2：
    1.一个球从100米的高度落下,每次落地后反弹高度为原高度的一半，在落下，
        1）写程序算出皮球从10次落地后反弹高度是多少？
        2）球共经过多少米
    2.打印九九乘法表
    3.分解质因数：
        如90 = 2*3*3*5
        (质因数是指最小能被原整数整除的素数（不含1）)

