迭代器 iterator 和 生成器 generator
    什么是迭代器：
        1.迭代器是访问可迭代对象的一种方式，用迭代器可以访问可迭代对象
        2.迭代器是指iter(可迭代对象)返回的对象
        3.迭代器可以用next(it)函数获取可迭代对象的数据

    迭代器函数iter和next
        iter(iterable) 从可迭代对象中返回一个迭代器，iterable必须是能提供一个
        迭代器的对象

        next(iterator) 从迭代器iterator中获取下一个记录。如果无法获取下一条记录，
        则触发StopIteration

    迭代器说明：
        迭代器只能往前取值，不可后退
        用iter函数可以返回一个可迭代对象的迭代器

    示例：
        >>>l=[1,2,3,4]
        >>>it = iter(l) #用iter返回一个迭代器用it绑定
        >>>next(it) #用next(it)来获取l中的元素
        1
        >>>next(it)
        2
        >>>next(it)
        3
        >>>next(it)
        4
        >>>next(it)#出现异常
        StopIteration

    从迭代器获取数据
        it = iter(l)
        while True:
	try:
		x=next(it)
		print(x)
	except StopIteration:
		break

练习1：
    已知有一个集合：
        s={'gs','js','zg','ny'}
        1.用for语句遍历集合中的元素并打印
        2.将上面的for语句改写为while语句实现上面同样的功能
           提示：用iter和next函数实现
        见 code 内的 lianxi1.py

    生成器 generator(python2.5及之后版本)
        生成器是能够动态提供数据的对象，生成器的对象也是可迭代对象

        生成器有两种：
            生成器函数
            生成器表达式

        生成器函数定义：
            含有yield语句的函数是生成器函数，此函数被调用将返回一个生成对象
            yield 翻译为（产生或生成）

        yield 语句
            语法：
                yield 表达式
            说明：
                yield 只用于def函数中，目的是将此函数作为生成器函数使用
                yield 用来生成数据，供next(it)函数使用
            示例见：
                code 内的 myyield.py

练习2：
    #写一个生成器函数my_integer(n)生成1到n的整数：
    def my_integer(n):
        i = 1:
        while i < n:
            yield i
            i += 1
    for x in my_integer(5):
        print(x) #1,2,3,4

练习3：
    写一个生成器函数myodd(start,stop)用于生成start开始到stop结束的所有奇数
    l=[x for x in myodd(1,10)]
    print(l) #[1,3,5,7,9]

    见code 内的 lianxi3.py

    生成器表达式：
        语法：
            （表达式 for 变量 in 可迭代对象 [if 真值表达式]）
        注：[]内的if部分可以省略

        作用：
            用推导式形式生成一个新的生成器
        示例：
            gen = (x**2 for x in range(1,5))
            it = iter(gen)
            next(it) #1
            next(it) #4
            next(it) #9
            next(it) #16
            next(it) #StopIteration
    
    迭代工具函数：
        迭代工具函数的作用是生成一个个性化的可迭代对象

        zip(iter1[,iter2,...])
        返回一个zip对象，此对象用于生成一个元组，
        此元组的个数是最小的可迭代对象决定，元组内容是可迭代对象iter1和iter2
        中元素的组合

        示例：
            >>>it=zip([1,2,3],('a','b','c','d'))
            >>>for x in it:
                   print(x)
            (1,'a')
            (2,'b')
            (3,'c')
            >>>dict(it)
            {1: 'a', 2: 'b', 3: 'c'}

        enumerate(iterable[,start])
        生成带索引的枚举对象，返回的迭代类型为索引-值对（index-value）对，
        默认索引从零开始，也可以用start制定

        示例：
            >>>name = ('a','b','c','d')
            >>>for i in enumerate(name):
                   print(i)
            (0, 'a')
            (1, 'b')
            (2, 'c')
            (3, 'd')
练习4：
    写一个程序，输入任意行的文字数据，当输入空行时结束输入，打印带有行号的输入
    结果：
        见：code 内的 lianxi4.py

字节串和字节数组：
    字节串（也叫字节序列）bytes
        作用：
            存储以字节为单位的数据
        说明：
            字节串是不可改变的序列
            字节是0-255之间的整数

        创建空的字节串的字面值
            b''
            b""
            b''''''
            b""""""

        创建非空的字节串的字面值：
            B=b'hello'
            B=b"hello"
            B='''abcd'''
            B="""abcd"""
            B=b'abc\n123'
            B=b'\x41\42'

        字节串的构造函数 bytes
            bytes() 生成一个空的字节串，等同于b''
            bytes(整数可迭代对象) 用可迭代对象初始化一个字节串
            bytes(整数n) 生成n个值为0的字节串
            bytes(字符串，encoding='utf-8') 用字符串的转换编码生成一个字节串
        
        bytes 的运算
            + += * *=
            < <= > >= == !=
            in/not in
            索引和切片

        in / not in
            B = b'ABCD'
            0x41 in B #True

        bytes 与 str 的区别：
            bytes 存储字节（0-255）
            str   存储字符（Unicode值）

        bytes 与 str转换
                编码(encode)
            str  --------->  bytes
                 b=s.encode(encoding='utf-8')

                解码(decode)
            bytes --------->  str
                 s=b.encode(encoding='utf-8')

            示例：
                b = '你好'.encode('utf-8')
                print(b)
                s = b.decode('utf-8')
                print(s)

    字节数组 bytearray
        可变的字节序列

        创建函数 bytearry
            bytearray() 生成一个空的字节数组
            bytearray(整数可迭代对象) 用可迭代对象初始化一个字节数组
            bytearray(整数n) 生成n个值为0的字节数组
            bytearray(字符串，encoding='utf-8') 用字符串的转换编码生成一个字节数组

        操作：
            + += * *=
            < <= > >= == !=
            in/not in
            索引和切片，可以索引、切片赋值
            例：
                >>>ba = bytearray(b'abcdefg')
                >>>ba[0]=65 #ba=bytearray(b'Abcdefg')
                >>>ba[1::2]=bytearray(b'BDF') #ba=bytearray(b'ABcDeFg')

练习5：
    1.用生成器函数生成斐波那契数列的前n个数
      1，1，2，3，5，8，13...
      def fibonacci(n):
          ...
          yield ..
    1)输出前20个数
    2)求前30个数的和

    2.写程序打印杨辉三角（只打印6层）
         1
        1 1
       1 2 1
      1 3 3 1
     1 4 6 4 1
    1 5 10 10 5 1
    
