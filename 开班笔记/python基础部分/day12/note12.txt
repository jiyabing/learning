函数变量
    函数名是变量，他在创建时绑定一个函数
    示例：
        def f1(lst=[]):
            print('f1函数被调用')
        f1()
        f1 = None
        f1()#出错，f1绑定的是None

    示例：
        >>>def f1():
               print('hello')
        >>>def f2():
               print('world')

        >>>f1,f2 = f2,f1
        >>>f1() #world
        world

函数可以作为另一个函数的参数（实参）传递
示例：
    见 code 内的 函数作为参数.py

函数可以作为另一个函数的返回值
    函数可以返回另一个函数
示例：
    见 code内的 函数作为返回值.py

函数嵌套定义：
    def 语句的作用是用来创建一个函数
    def 语句可以写在函数内部，在函数执行时可以动态创建一个函数
    示例：
        见 code 内的 函数嵌套.py



全局变量和局部变量
    局部变量：
        1.定义在函数内部的变量称为局部变量
         （函数的形参也是局部变量）
        2.局部变量只能在函数内部使用
        3.局部变量在函数调用时才能够被创建，在函数调用之后会自动销毁

    全局变量：
        1.定义在函数外部，模块内部的变量称为全局变量
        2.全局变量，所有函数都可以直接访问（但函数内部不能直接修改
          全局变量的绑定关系）

    说明：
        1.在函数内首次对变量赋值是创建局部变量，再次为变量赋值是修改
          局部变量的绑定关系
        2.在函数内部的赋值语句不会对全局变量造成影响

python作用域：
    作用域也叫命名空间，是访问变量时查找变量名的范围空间

    python的四个作用域LEGB
              作用域                     英文解释           英文缩写
        局部作用域（函数内）         Local(function)           L
        外部嵌套函数作用域      Enclosing function locals      E
        函数定义所在模块作用域        Global(module)           G
        python内置模块的作用域       Builtin(python)           B
    示例：
        见 code 内的 作用域.py

变量名的查找规则（顺序）：
    1.查找本地变量
    2.查找包裹此函数的外部嵌套函数内部的变量
    3.全局变量
    4.内置变量

globals() / locals() 函数
    globals()返回全局作用域内变量的字典
    locals() 返回局部作用域内变量的字典

    示例：
        见 code 内的 glabals_locals_function.py

练习1
    1.写一个函数mysum，此函数的功能是返回：
      1+2+3+4+...+n的和
      def mysum(n):
          ...
      print(mysum(100))

    2.写一个函数mysum2,此函数可以传入一个参数，两个参数和三个参数：
      1）当传入一个参数时，这个参数代表终止数
      2）当传入两个参数时，第一个参数代表起始值，第二个参数代表终止值
      3）当传入三个参数时，第三个参数代表步长
      此函数的功能是返回开始到终止值的和

global 语句
    作用：
        1.告诉解释执行器，global语句声明的一个或多个变量，这些变量的
          作用域为模块级的作用域的变量，也称作全局变量
        2.全局声明（global）
          将赋值变量映射到模块文件内部的作用域
    语法：
        global 变量1，变量2

    示例：
        见 code 内的 global语句.py

    说明：
        1.全局变量如果要在函数内部被赋值，则必须经过全局声明（否则
          会被认为是局部变量）
        2.全局变量在函数内部不经过声明就可以直接访问
        3.不能先声明局部变量，再用global声明为全局变量，
          此做法不符合规则
        4.global变量列表里的变量名不能出现在此作用域内的形参列表
            示例：
                def f1(v):
                    global v #此时v不能被声明为全局变量

nonlocal 语句
    作用：
        告诉解释器，nonlocal声明的变量不是局部变量，也不是全局变量，
        而是外部嵌套函数内的变量
    语法：
        nonlocal 变量1，变量2..
    示例：
        见 code 内的 nonlocal语句.py
        
    说明：
        1.nonlocal语句只能在被嵌套函数内部进行使用
        2.访问nonlocal变量将对外部嵌套函数作用域内的变量进行操作
        3.当有两层或两层以上函数嵌套时，访问nonlocal变量只对
          最近一层的变量进行操作
        4.nonlocal语句的变量列表的变量名不能出现在此函数的参数列表里


练习2：
    1.创建一个列表L=[]
      写一个函数input_number读取数据放入列表L中
      程序如下：
          L=[]
          def input_number():
              ...
              while True:
                  i = int(input('输入数字(-1结束)：'))
                  ...
          input_number()
          print('刚才输入的整数值是：',L)
    2.写一个函数isprime(x)
       判断是否为素数，如果为素数返回True,否则返回False
       测试代码：
           if isprime(5):
               print('5素数')

    3.写一个函数prime_m2n(m,n)
       返回从m开始到n结束范围内素数的列表，并打印
       l= prime_m2n(10,20)
       print(l) #[11,13,17,19]

    4.写一个函数primes(n),返回小于n的所有的素数的列表
      l = prime(10)
      print(l) #[2,3,5,7]





        
