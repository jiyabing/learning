列表 in / not in 运算符
    in 判断一个对象是否存在于容器内，如果存在则返回True，否则返回False
    用法同字符串一致
    语法：
        数据对象 in 列表

列表的索引
    语法:
        列表[整数表达式]
    用法：
        取值时，等同于字符串的索引操作
        索引分为正向索引和反向索引，规则和字符串一致

    列表索引赋值：
        列表是可变的序列。可以通过索引赋值改变列表中的元素
        示例：
            l = [1,2,3]
            l[1] = 22  #将第二个元素改为22

列表的切片
    语法：
        列表[:]
        列表[::]
    列表的切片取值时，返回一个列表，规则等同于字符串切片规则

    列表切片赋值
        作用：
            可以改变原列表的排序，可以插入和修改数据，可以用切片改变列表的对应
            元素的值
        语法：
            列表[切片] = 可迭代对象
            注：赋值运算符的右侧必须是一个可迭代对象
        示例：
            l = [2,3,4]
            l[:1] = [1.1,2.2] #l = [1.1,2.2,3,4]
            l[3:] = [5,6] #l = [2,3,4,5,6]
            l[1:2] = 'abcd' #l=[2,'a','b','c','d',4]
        注意事项：
            对于步长不等于1的切片赋值，赋值运算符右侧的可迭代对象提供的元素个数
            一定要等于切片切出的段数
            例：
            l = [1,2,3,4,5,6]
            l[::2] = 'abc' #l = ['a',2,'b',4,'c',6]
            l[::2] = 'abcde' #会报错
del 语句 用于删除列表中的元素
    语法：
        del 序列[整数表达式]
        del 序列[切片]
    示例：
        l = [1,2,3,4,5,6]
        del l[-1] #删除最后一个元素6
        del l[::2] #删除元素1，3，5

python3中常用于序列的函数
    len(seq) 返回容器的元素个数
    max(x)   返回序列的最大值元素
    min(x)   返回序列的最小值元素
    sum(x)   返回序列中所有元素的和（元素为数值类型）
    any(x)   真值测试，如果容器内其中一个值为True,则返回True,否则返回False
    all(x)   真值测试，容器内所有元素的布尔值为True才返回True

python3中列表方法：
    见"python3笔记附件"中的“list方法”

练习1
    写一个程序，让用户输入很多个正整数，当输入小于零的数时结束输入
    1）输出这些数的和
    2）输出这些数的最大数和第二大的数
    3）删除最小的一个数
    4）按原来输入的顺序打印出剩余的这些数
    见code内的lianxi1.py

浅拷贝 shallow copy 和 深拷贝 deep copy
浅拷贝：
    是指复制过程中，只复制一层变量，不会复制深层变量绑定的对象的复制过程
    示例：
        l = [3.1,3.2]
        l1 = [1,2,l]   #l1 = [1,2,[3.1,3.2]]
        l2 = l1.copy() #l2 = [1,2,[3.1,3.2]] ,浅拷贝
        l[0] = 3.14
        l1 #此时l1 = [1,2,[3.14,3.2]]
        l2 #此时l2 = [1,2,[3.14,3.2]]为什么变成3.14？
        #l1[2] 和 l2[2] 共同拥有l绑定的对象

深拷贝：
    示例：
        import copy 导入copy模块
        l = [3.1,3.2]
        l1 = [1,2,l]   #l1 = [1,2,[3.1,3.2]]
        l2 = copy.deepcopy(l1) #l2 = [1,2,[3.1,3.2]]
        l[0] = 3.14
        l1 #此时l1 = [1,2,[3.14,3.2]]
        l2 #此时l2 = [1,2,[3.1,3.2]] #此列表不受影响
        注：
            深拷贝通常只对可变对象进行深层复制，不可变对象通常不会被复制

列表与字符串比较
    1.列表和字符串都是序列，元素之间有先后关系
    2.字符串是不可变的序列，而列表是可变的序列
    3.字符串中每个元素只能存储字符，而列表可以存储任意类型的元素
    4.列表和字符串都是可迭代对象

字符串文本解析方法 split 和 join
    s.split(sep=None) 将字符串使用sep作为分隔符分割s字符串，返回分割后的
    字符串列表，当不给定参数时，用空白字符作为分隔符分割
    示例：
        >>>s = 'hello world'
        >>>s.split()
        ['hello','world']
        >>>s.split('o')
        ['hell',' w','rld'] # w 前有一个空格

    s.join(iterable) 用可迭代对象中的字符串，返回一个中间用s进行分隔的字符串
    示例：
        >>>'-'.join('hello')
        'h-e-l-l-o'
        >>>'+'.join(['1','2','3'])
        '1+2+3'
        

列表推导式 list comprehension
    列表推导式是用可迭代对象依次生成带有多个元素的列表的表达式
    作用：
        用简易方法生成列表
    语法：
        [表达式 for 变量 in 可迭代对象]
        或
        [表达式 for 变量 in 可迭代对象 if 真值表达式]
    示例：
        >>>[i**2 for i in range(10)]
        [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
        >>>[i*i for i in range(10) if i%2==0]
        [4,16,36,64]
        >>>[i**2 for i in range(1,10,2)]
        [1,9,25,47,81]

练习2
    输入一个数值作为开始的数，用begin绑定
    再输入一个结束的整数用end绑定
    将开始至结束的数中，平方加1，能被5整除的数放入列表中
    [i for i in range(1,100) if (i**2+1)%5 == 0]

列表推导式的嵌套
    语法：
        [表达式1 for 变量1 in 可迭代对象1 if 真值表达式
             for 变量2 in 可迭代对象2 if 真值表达式]
    示例：
        >>>[x + y for x in 'abc' for y in '123']
        ['a1','a2','a3','b1','b2','b3','c1','c2','c3']

练习3
    1.输入一个整数n,代表结束的数，将1-n之间所有素数计算出来并存入到列表L中
        1）最后打印此列表中的全部素数
        2）打印这些素数的和

    2.求100以内有哪些整数与自身加1的乘积再对11求余的结果等于8？
        x*(x+1)%11 == 8
        打印这些数，将这些数存于列表中（尝试使用列表推导式）

    3.计算20个斐波那契数，存于列表中，最后打印这20个数
        1，1，2，3，5，8，13...
